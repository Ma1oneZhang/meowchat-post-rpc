// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: post.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostRpcClient is the client API for PostRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostRpcClient interface {
	SearchPost(ctx context.Context, in *SearchPostReq, opts ...grpc.CallOption) (*SearchPostResp, error)
	CreatePost(ctx context.Context, in *CreatePostReq, opts ...grpc.CallOption) (*CreatePostResp, error)
	RetrievePost(ctx context.Context, in *RetrievePostReq, opts ...grpc.CallOption) (*RetrievePostResp, error)
	UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostResp, error)
	DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*DeletePostResp, error)
	ListPost(ctx context.Context, in *ListPostReq, opts ...grpc.CallOption) (*ListPostResp, error)
	ListPostByUserId(ctx context.Context, in *ListPostByUserIdReq, opts ...grpc.CallOption) (*ListPostByUserIdResp, error)
}

type postRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewPostRpcClient(cc grpc.ClientConnInterface) PostRpcClient {
	return &postRpcClient{cc}
}

func (c *postRpcClient) SearchPost(ctx context.Context, in *SearchPostReq, opts ...grpc.CallOption) (*SearchPostResp, error) {
	out := new(SearchPostResp)
	err := c.cc.Invoke(ctx, "/post.post_rpc/SearchPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postRpcClient) CreatePost(ctx context.Context, in *CreatePostReq, opts ...grpc.CallOption) (*CreatePostResp, error) {
	out := new(CreatePostResp)
	err := c.cc.Invoke(ctx, "/post.post_rpc/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postRpcClient) RetrievePost(ctx context.Context, in *RetrievePostReq, opts ...grpc.CallOption) (*RetrievePostResp, error) {
	out := new(RetrievePostResp)
	err := c.cc.Invoke(ctx, "/post.post_rpc/RetrievePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postRpcClient) UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostResp, error) {
	out := new(UpdatePostResp)
	err := c.cc.Invoke(ctx, "/post.post_rpc/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postRpcClient) DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*DeletePostResp, error) {
	out := new(DeletePostResp)
	err := c.cc.Invoke(ctx, "/post.post_rpc/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postRpcClient) ListPost(ctx context.Context, in *ListPostReq, opts ...grpc.CallOption) (*ListPostResp, error) {
	out := new(ListPostResp)
	err := c.cc.Invoke(ctx, "/post.post_rpc/ListPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postRpcClient) ListPostByUserId(ctx context.Context, in *ListPostByUserIdReq, opts ...grpc.CallOption) (*ListPostByUserIdResp, error) {
	out := new(ListPostByUserIdResp)
	err := c.cc.Invoke(ctx, "/post.post_rpc/ListPostByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostRpcServer is the server API for PostRpc service.
// All implementations must embed UnimplementedPostRpcServer
// for forward compatibility
type PostRpcServer interface {
	SearchPost(context.Context, *SearchPostReq) (*SearchPostResp, error)
	CreatePost(context.Context, *CreatePostReq) (*CreatePostResp, error)
	RetrievePost(context.Context, *RetrievePostReq) (*RetrievePostResp, error)
	UpdatePost(context.Context, *UpdatePostReq) (*UpdatePostResp, error)
	DeletePost(context.Context, *DeletePostReq) (*DeletePostResp, error)
	ListPost(context.Context, *ListPostReq) (*ListPostResp, error)
	ListPostByUserId(context.Context, *ListPostByUserIdReq) (*ListPostByUserIdResp, error)
	mustEmbedUnimplementedPostRpcServer()
}

// UnimplementedPostRpcServer must be embedded to have forward compatible implementations.
type UnimplementedPostRpcServer struct {
}

func (UnimplementedPostRpcServer) SearchPost(context.Context, *SearchPostReq) (*SearchPostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPost not implemented")
}
func (UnimplementedPostRpcServer) CreatePost(context.Context, *CreatePostReq) (*CreatePostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostRpcServer) RetrievePost(context.Context, *RetrievePostReq) (*RetrievePostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrievePost not implemented")
}
func (UnimplementedPostRpcServer) UpdatePost(context.Context, *UpdatePostReq) (*UpdatePostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedPostRpcServer) DeletePost(context.Context, *DeletePostReq) (*DeletePostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostRpcServer) ListPost(context.Context, *ListPostReq) (*ListPostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPost not implemented")
}
func (UnimplementedPostRpcServer) ListPostByUserId(context.Context, *ListPostByUserIdReq) (*ListPostByUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostByUserId not implemented")
}
func (UnimplementedPostRpcServer) mustEmbedUnimplementedPostRpcServer() {}

// UnsafePostRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostRpcServer will
// result in compilation errors.
type UnsafePostRpcServer interface {
	mustEmbedUnimplementedPostRpcServer()
}

func RegisterPostRpcServer(s grpc.ServiceRegistrar, srv PostRpcServer) {
	s.RegisterService(&PostRpc_ServiceDesc, srv)
}

func _PostRpc_SearchPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostRpcServer).SearchPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.post_rpc/SearchPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostRpcServer).SearchPost(ctx, req.(*SearchPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostRpc_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostRpcServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.post_rpc/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostRpcServer).CreatePost(ctx, req.(*CreatePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostRpc_RetrievePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrievePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostRpcServer).RetrievePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.post_rpc/RetrievePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostRpcServer).RetrievePost(ctx, req.(*RetrievePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostRpc_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostRpcServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.post_rpc/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostRpcServer).UpdatePost(ctx, req.(*UpdatePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostRpc_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostRpcServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.post_rpc/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostRpcServer).DeletePost(ctx, req.(*DeletePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostRpc_ListPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostRpcServer).ListPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.post_rpc/ListPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostRpcServer).ListPost(ctx, req.(*ListPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostRpc_ListPostByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostRpcServer).ListPostByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.post_rpc/ListPostByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostRpcServer).ListPostByUserId(ctx, req.(*ListPostByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PostRpc_ServiceDesc is the grpc.ServiceDesc for PostRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "post.post_rpc",
	HandlerType: (*PostRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchPost",
			Handler:    _PostRpc_SearchPost_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _PostRpc_CreatePost_Handler,
		},
		{
			MethodName: "RetrievePost",
			Handler:    _PostRpc_RetrievePost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _PostRpc_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _PostRpc_DeletePost_Handler,
		},
		{
			MethodName: "ListPost",
			Handler:    _PostRpc_ListPost_Handler,
		},
		{
			MethodName: "ListPostByUserId",
			Handler:    _PostRpc_ListPostByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post.proto",
}
