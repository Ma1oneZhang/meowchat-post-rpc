// Code generated by goctl. DO NOT EDIT.
// Source: post.proto

package postrpc

import (
	"context"

	"github.com/xh-polaris/meowchat-post-rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CountPostReq      = pb.CountPostReq
	CountPostResp     = pb.CountPostResp
	CreatePostReq     = pb.CreatePostReq
	CreatePostResp    = pb.CreatePostResp
	DeletePostReq     = pb.DeletePostReq
	DeletePostResp    = pb.DeletePostResp
	FilterOptions     = pb.FilterOptions
	ListPostReq       = pb.ListPostReq
	ListPostResp      = pb.ListPostResp
	PaginationOptions = pb.PaginationOptions
	Post              = pb.Post
	RetrievePostReq   = pb.RetrievePostReq
	RetrievePostResp  = pb.RetrievePostResp
	SearchField       = pb.SearchField
	SearchOptions     = pb.SearchOptions
	SetOfficialReq    = pb.SetOfficialReq
	SetOfficialResp   = pb.SetOfficialResp
	UpdatePostReq     = pb.UpdatePostReq
	UpdatePostResp    = pb.UpdatePostResp

	PostRpc interface {
		CreatePost(ctx context.Context, in *CreatePostReq, opts ...grpc.CallOption) (*CreatePostResp, error)
		RetrievePost(ctx context.Context, in *RetrievePostReq, opts ...grpc.CallOption) (*RetrievePostResp, error)
		UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostResp, error)
		DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*DeletePostResp, error)
		ListPost(ctx context.Context, in *ListPostReq, opts ...grpc.CallOption) (*ListPostResp, error)
		CountPost(ctx context.Context, in *CountPostReq, opts ...grpc.CallOption) (*CountPostResp, error)
		SetOfficial(ctx context.Context, in *SetOfficialReq, opts ...grpc.CallOption) (*SetOfficialResp, error)
	}

	defaultPostRpc struct {
		cli zrpc.Client
	}
)

func NewPostRpc(cli zrpc.Client) PostRpc {
	return &defaultPostRpc{
		cli: cli,
	}
}

func (m *defaultPostRpc) CreatePost(ctx context.Context, in *CreatePostReq, opts ...grpc.CallOption) (*CreatePostResp, error) {
	client := pb.NewPostRpcClient(m.cli.Conn())
	return client.CreatePost(ctx, in, opts...)
}

func (m *defaultPostRpc) RetrievePost(ctx context.Context, in *RetrievePostReq, opts ...grpc.CallOption) (*RetrievePostResp, error) {
	client := pb.NewPostRpcClient(m.cli.Conn())
	return client.RetrievePost(ctx, in, opts...)
}

func (m *defaultPostRpc) UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostResp, error) {
	client := pb.NewPostRpcClient(m.cli.Conn())
	return client.UpdatePost(ctx, in, opts...)
}

func (m *defaultPostRpc) DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*DeletePostResp, error) {
	client := pb.NewPostRpcClient(m.cli.Conn())
	return client.DeletePost(ctx, in, opts...)
}

func (m *defaultPostRpc) ListPost(ctx context.Context, in *ListPostReq, opts ...grpc.CallOption) (*ListPostResp, error) {
	client := pb.NewPostRpcClient(m.cli.Conn())
	return client.ListPost(ctx, in, opts...)
}

func (m *defaultPostRpc) CountPost(ctx context.Context, in *CountPostReq, opts ...grpc.CallOption) (*CountPostResp, error) {
	client := pb.NewPostRpcClient(m.cli.Conn())
	return client.CountPost(ctx, in, opts...)
}

func (m *defaultPostRpc) SetOfficial(ctx context.Context, in *SetOfficialReq, opts ...grpc.CallOption) (*SetOfficialResp, error) {
	client := pb.NewPostRpcClient(m.cli.Conn())
	return client.SetOfficial(ctx, in, opts...)
}
