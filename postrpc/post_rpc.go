// Code generated by goctl. DO NOT EDIT!
// Source: post.proto

package postrpc

import (
	"context"

	"postRpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreatePostReq                   = pb.CreatePostReq
	CreatePostResp                  = pb.CreatePostResp
	DeletePostReq                   = pb.DeletePostReq
	DeletePostResp                  = pb.DeletePostResp
	ListPostByUserAndPvtAndStatReq  = pb.ListPostByUserAndPvtAndStatReq
	ListPostByUserAndPvtAndStatResp = pb.ListPostByUserAndPvtAndStatResp
	ListPostReq                     = pb.ListPostReq
	ListPostResp                    = pb.ListPostResp
	Post                            = pb.Post
	RetrievePostReq                 = pb.RetrievePostReq
	RetrievePostResp                = pb.RetrievePostResp
	UpdatePostReq                   = pb.UpdatePostReq
	UpdatePostResp                  = pb.UpdatePostResp

	PostRpc interface {
		CreatePost(ctx context.Context, in *CreatePostReq, opts ...grpc.CallOption) (*CreatePostResp, error)
		RetrievePost(ctx context.Context, in *RetrievePostReq, opts ...grpc.CallOption) (*RetrievePostResp, error)
		UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostResp, error)
		DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*DeletePostResp, error)
		ListPost(ctx context.Context, in *ListPostReq, opts ...grpc.CallOption) (*ListPostResp, error)
		ListPostByUserAndPvtAndStat(ctx context.Context, in *ListPostByUserAndPvtAndStatReq, opts ...grpc.CallOption) (*ListPostByUserAndPvtAndStatResp, error)
	}

	defaultPostRpc struct {
		cli zrpc.Client
	}
)

func NewPostRpc(cli zrpc.Client) PostRpc {
	return &defaultPostRpc{
		cli: cli,
	}
}

func (m *defaultPostRpc) CreatePost(ctx context.Context, in *CreatePostReq, opts ...grpc.CallOption) (*CreatePostResp, error) {
	client := pb.NewPostRpcClient(m.cli.Conn())
	return client.CreatePost(ctx, in, opts...)
}

func (m *defaultPostRpc) RetrievePost(ctx context.Context, in *RetrievePostReq, opts ...grpc.CallOption) (*RetrievePostResp, error) {
	client := pb.NewPostRpcClient(m.cli.Conn())
	return client.RetrievePost(ctx, in, opts...)
}

func (m *defaultPostRpc) UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostResp, error) {
	client := pb.NewPostRpcClient(m.cli.Conn())
	return client.UpdatePost(ctx, in, opts...)
}

func (m *defaultPostRpc) DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*DeletePostResp, error) {
	client := pb.NewPostRpcClient(m.cli.Conn())
	return client.DeletePost(ctx, in, opts...)
}

func (m *defaultPostRpc) ListPost(ctx context.Context, in *ListPostReq, opts ...grpc.CallOption) (*ListPostResp, error) {
	client := pb.NewPostRpcClient(m.cli.Conn())
	return client.ListPost(ctx, in, opts...)
}

func (m *defaultPostRpc) ListPostByUserAndPvtAndStat(ctx context.Context, in *ListPostByUserAndPvtAndStatReq, opts ...grpc.CallOption) (*ListPostByUserAndPvtAndStatResp, error) {
	client := pb.NewPostRpcClient(m.cli.Conn())
	return client.ListPostByUserAndPvtAndStat(ctx, in, opts...)
}
